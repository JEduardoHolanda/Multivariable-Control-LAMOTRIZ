component ControlledReservoir < HVAC.OnePortBase
% Controlled Reservoir
% This block sets controlled boundary conditions in a moist air network.
% The volume of moist air inside the reservoir is assumed infinite.
% Therefore, the state of the moist air volume is assumed quasi-steady.
% Moist air leaves the reservoir at the reservoir pressure, reservoir
% temperature, and reservoir relative humidity. Moist air enters the
% reservoir at the reservoir pressure, but its temperature and relative
% humidity are determined by the moist air network upstream. The reservoir
% temperature [K], reservoir pressure [Pa], and reservoir relative humidity
% are set by the physical signal ports T, P, and RH, respectively.

% Copyright 2017 The MathWorks, Inc.

inputs
    % Reservoir temperature
    T  = {293.15, 'K' }; % T:bottom
    % Reservoir pressure
    P  = {101325, 'Pa'}; % P:bottom
    % Reservoir relative humidity
    RH = {0.5,    '1' }; % RH:bottom
end

parameters
    area_A = {0.01, 'm^2'}; % Cross-sectional area at port A
end

variables (ExternalAccess=none)
    log_p_w_sat = {8, '1'}; % Log of water vapor saturation pressure
end

function setup

if area_A <= 0
    pm_error('Simscape:GreaterThanZero', 'Cross-sectional area at port A')
end

flow_area_A = area_A;

end

equations
    let
        % Domain parameters
        R_da          = A.R_da;
        R_w           = A.R_w;
        p_w_sat_coeff = A.p_w_sat_coeff;
        T_ref         = A.T_ref;
        h_da_ref      = A.h_da_ref;
        h_w_ref       = A.h_w_ref;
        cp_da_ref     = A.cp_da_ref;
        cp_w_ref      = A.cp_w_ref;
        p_min         = A.p_min;
        p_max         = A.p_max;
        T_min         = A.T_min;
        T_max         = A.T_max;

        % Across variables
        p_A = A.p;

        % Reservoir pressure saturates at the minimum and maximum valid pressure
        p_reservoir = ...
            if P <= p_min, ...
                p_min ...
            elseif P >= p_max, ...
                p_max ...
            else ...
                P ...
            end;

        % Reservoir temperature saturates at the minimum and maximum valid temperature
        T_reservoir = ...
            if T <= T_min, ...
                T_min ...
            elseif T >= T_max, ...
                T_max ...
            else ...
                T ...
            end;

        % Reservoir relative humidity saturates at 0 and 1
        RH_reservoir = ...
            if RH <= 0, ...
                0 ...
            elseif RH >= 1, ...
                1 ...
            else ...
                RH ...
            end;

        % Temperature value in Kelvin
        T_reservoir_val = value(T_reservoir, 'K');

        % Reservoir water vapor partial pressure
        p_w_reservoir = RH_reservoir * {exp(log_p_w_sat), 'Pa'};

        % Reservoir dry air and water vapor specific enthalpies
        h_da_reservoir = h_da_ref + cp_da_ref*(T_reservoir - T_ref);
        h_w_reservoir  = h_w_ref  + cp_w_ref *(T_reservoir - T_ref);

        % Reservoir mixture specific enthalpy and water vapor mass fraction
        % is equal to those for outflow
        h_reservoir   = h_out;
        x_w_reservoir = x_w_out;
    in
        % Assume no flow resistance
        p_A == p_reservoir;

        % Water vapor saturation pressure
        log_p_w_sat == ...
            p_w_sat_coeff(1)/T_reservoir_val + ...
            p_w_sat_coeff(2) + ...
            p_w_sat_coeff(3)*T_reservoir_val + ...
            p_w_sat_coeff(4)*T_reservoir_val^2 + ...
            p_w_sat_coeff(5)*T_reservoir_val^3 + ...
            p_w_sat_coeff(6)*log(T_reservoir_val);

        % Reservoir water vapor mass fraction
        x_w_reservoir * R_w * (p_reservoir - p_w_reservoir) == (1 - x_w_reservoir) * R_da * p_w_reservoir;

        % Reservoir mixture specific enthalpy
        h_reservoir == (1 - x_w_reservoir)*h_da_reservoir + x_w_reservoir*h_w_reservoir;
    end
end

end